tt
add
tt=data.frame(unclass(survfit(Surv(Time,Event)~1,ndf[ndf$grp==i,]))[c("time","n.risk","n.event")])
names(tt)[1]="x"
n0=tt$n.risk[1]
tt=rbind(c(0,n0,0),tt)
tt$y=100*tt$n.risk/n0
add=tt[2:(nrow(tt)-1),]
add
tt
source('~/Stats/Shiny/playrout.r')
a
order(tt$x,-tt$y)
tt=data.frame(unclass(survfit(Surv(Time,Event)~1,ndf[ndf$grp==i,]))[c("time","n.risk","n.event")])
names(tt)[1]="x"
n0=tt$n.risk[1]
tt=rbind(c(0,n0,0),tt)
tt$y=100*tt$n.risk/n0
tt
tt[order(tt$x,-tt$y),]
df
rangetp=c(12,15)
usemax=F
lgrps
# plotCS<-function(df,resp,lgrps,rangetp,usemax=FALSE){
rangetp=c(12,15)
usemax=F
lgrps=levels(df$grp)[1:2]
if(length(lgrps)==0) lgrps=levels(df$grp)
df$Resp=df[,resp]
if(length(lgrps)<1) lgrps=levels(df$grp)
#  print(rangetp)
l=which(df$grp%in%lgrps & !is.na(df$Resp) & df$tp>=rangetp[1]  & df$tp<=rangetp[2])
idf=df[l,]
ylim=range(idf$Resp,na.rm=T)
ylim=pretty(seq(ylim[1],ylim[2],length.out = 8))
if(all(idf$Resp>0,na.rm=T)) ylim[1]=max(0,ylim[1])
idf=idf[order(idf$grp,idf$Id,idf$tp),]
l2use=tapply(1:nrow(idf),idf$Id,function(x) rev(x)[1])
if(usemax) l2use=tapply(1:nrow(idf),idf$Id,function(x) x[which.max(idf$Resp[x])])
idf=idf[l2use,]
idf$grp=factor(idf$grp)
newrange=range(idf$tp)
if(newrange[1]<newrange[2]) ylab=paste(ifelse(usemax,"Max. r","R"),"esponse in time range: ",newrange[1],"-",newrange[2],sep="")
if(newrange[1]==newrange[2]) ylab=paste("Response at time=",newrange[1],sep="")
source('~/Stats/Shiny/playrout.r')
source('~/Stats/Shiny/playrout.r')
b
#####
v=idf$Id
if(length(unique(newrange))>1) v=paste(idf$Id," (",idf$tp,")",sep="")
names(v)=NULL
lso=order(-idf$tp)
v=tapply(v[lso],idf$grp[lso],sort)
sumids=cbind(Group=names(v),Animals=unlist(sapply(v,paste,collapse=" ")))
#####
exptxt=list('****Ids***',c('Group','Animals'))
for(i in 1:nrow(sumids)) exptxt=c(exptxt,list(sumids[i,]))
idf2=idf;idf2$grp=as.character(idf2$grp)
exptxt=c(exptxt,list('****Data***'),list(colnames(idf2)[1:5]))
for(i in 1:nrow(idf)) exptxt=c(exptxt,list(idf2[i,1:5]))
objres=list(plot=b,df=idf,tp=newrange,sumids=sumids,exptxt=exptxt,resp=resp,lgrps=lgrps)
bfco=0.1;checkvar=TRUE;ref='All'
idf=objres$df
lgrps=levels(idf$grp)
sumids=objres$sumids
exptxt=list('****Ids***',c('Group','Animals'))
for(i in 1:nrow(sumids)) exptxt=c(exptxt,list(sumids[i,]))
#####
cttab=modtab=NULL
if(sum(table(idf$grp)>1)>1){
idf2=idf[idf$grp %in% names(which((table(idf$grp)>1))),]
idf2$grp=factor(idf2$grp)
idf2$out=FALSE
if(ref%in%levels(idf2$grp)) idf2$grp=relevel(idf2$grp,ref)
mod=gls(Resp~grp,data=idf2[!idf2$out,])
if(checkvar){
modw=gls(Resp~grp,data=idf2[!idf2$out,],weights = varIdent(form=~1|grp))
if(anova(mod,modw)[2,9] & AIC(modw)<AIC(mod)) mod=modw
}
out=outlierTest(lm(residuals(mod,'pearson')~1),cutoff = bfco)
if(out$signif){
idf2[names(out$rstudent),]$out=TRUE
mod=gls(Resp~grp,data=idf2[!idf2$out,])
if(checkvar){
modw=gls(Resp~grp,data=idf2[!idf2$out,],weights = varIdent(form=~1|grp))
if(anova(mod,modw)[2,9] & AIC(modw)<AIC(mod)) mod=modw
}
}
ctmat=contrMat(table(idf2$grp),ifelse(ref%in%levels(idf2$grp),'Dunnet',"Tukey"))
ctmat[,1]=0
hrs=esticon(mod,ctmat)
hrpv=sprintf('<%s',myf(hrs[,6]))
hrpva=sprintf('<%s',myf(p.adjust(hrs[,6],"holm")))
hrs=sprintf("%.2f [%.2f;%.2f]",hrs[,2],hrs[,7],hrs[,8])
lrs<-suppressWarnings(sapply(strsplit(rownames(ctmat)," - "),function(x) wilcox.test(Resp~factor(grp),idf2[idf2$grp%in%x,])$p.value))
lrspv=sprintf('<%s',myf(lrs))
lrspva=sprintf('<%s',myf(p.adjust(lrs,"holm")))
cttab=cbind(Group=gsub(" - .*","",rownames(ctmat)),Comp=gsub(".* - ","",rownames(ctmat)),
Contrasts=hrs,Pvalue=hrpv,PvalueAdj=hrpva,WilPVal=lrspv,WilPvalAdj=lrspv)
exptxt=c(exptxt,list('***Stats***'),list(colnames(cttab)))
for(i in 1:nrow(cttab)) exptxt=c(exptxt,list(cttab[i,]))
if(ref%in%levels(idf2$grp)) cttab=cttab[,-2,drop=F]
kt=kruskal.test(Resp~grp,data=idf2[!idf2$out,])
aov=anova(mod)
modtab=rbind(sprintf("Kruskal test: %.2f, p<%s",kt$statistic,myf(kt$p.value)),
sprintf("F test: %.2f, p<%s", aov[2,2],myf( aov[2,3])))
colnames(modtab)="Test"
}
myf
modtab
cttab
mod
summary(mod)
ref%in%levels(idf2$grp)
ref
ctmat=contrMat(table(idf2$grp),ifelse(ref%in%levels(idf2$grp),'Dunnet',"Tukey"))
ctmat
ctmat[,1]=0
hrs=esticon(mod,ctmat)
hrs
mod
summary(mod)
ctmat
glht(mod,linfct=ctmat)
summary(glht(mod,linfct=ctmat))
mod
summary(mod)
mod
Anova(mod)
anova(mod)
Anova(mod)
Anova(mod)
aov=Anova(mod)
sprintf("Chisq test: %.2f, p<%s", aov[1,2],myf( aov[1,3]))
summary(glht(mod,linfct=ctmat))
?glht
summary(glht(mod,linfct=ctmat),adjust="none")
summary(glht(mod,linfct=ctmat),adjusted="none")
summary(glht(mod,linfct=ctmat),adjusted("none"))
sum1=summary(glht(mod,linfct=ctmat),adjusted("none"))
sprintf("Chisq test: %.2f, p<%s", aov[1,2],myf( aov[1,3]))
shiny::runApp()
shiny::runApp()
shiny::runApp()
mod
update(mod,"ML")
update(mod,method="ML")
anova(update(mod,method="ML"))
Anova(update(mod,method="ML"))
update(mod,method="ML")
?gls
modml2=update(modml,model=.~1)
modml=update(mod,method="ML")
modml2=update(modml,model=.~1)
anova(modml,modml2)
cttab
?Anova
aov=car:::Anova(mod)
aov
anova(mod,type = "chi")
anova(mod,type = "marginal")
anova(mod,type = "seq")
anova(mod)
?gls
?Anova
mod
update(mod,weights=NULL)
summary(update(mod,weights=NULL))
Anova(summary(update(mod,weights=NULL)))
?wald
??wald
library(lmtest)
waldtest(mod)
aov=waldtest(mod)
sprintf("Chisq test: %.2f, p<%s", aov[2,3],myf( aov[2,4]))
aov=waldtest(mod,)
?aov
cttab
anova(mod)
waldtest(mod)
shiny::runApp()
aovres
aovres=waldtest(mod)
aovres
sprintf("Chisq test: %.2f, p<%s", aovres[2,3],myf( aovres[2,4]))
shiny::runApp()
?aovres
??aovres
shiny::runApp()
aovres=anova(mod)
aovres
aovres=waldtest(mod)
aovres[2,3]
aovres[2,4]
kt=kruskal.test(Resp~grp,data=idf2[!idf2$out,])
print("OKK3")
print("OKK4")
modtab=rbind(sprintf("Kruskal test: %.2f, p<%s",kt$statistic,myf(kt$p.value)),
sprintf("Chisq test: %.2f, p<%s", aovres[2,3],myf( aovres[2,4])))
colnames(modtab)="Test"
modtab
shiny::runApp()
aovres
mod
waldtest(mod)
?anova
?gls
summary(mod)
Anova(mod)
anova(mod,update(mod,model=.~1))
anova(update(mod,method="ML"),update(mod,model=.~1,method="ML"))
aovres=anova(update(mod,method="ML"),update(mod,model=.~1,method="ML"))
aovres
aovres[2,7]
aovres[2,8]
shiny::runApp()
shiny::runApp()
Your web browser will open the web app.
shiny::runApp()
shiny::runApp()
library(shiny)
runGitHub("TumGrowth", "tonedivad")
runGitHub("TumGrowth", "tonedivad")
shiny:::runGitHub("TumGrowth", "tonedivad")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Stats/Shiny/TumGrowth/")
rm(list=ls())
source("helpers.R")
source("files.R")
source("long.R")
source("km.R")
source("cs.R")
source("plotexport.R")
ifile="../CT26 CRMs Final File.txt"
df=loadFile(ifile)$data
df
df=loadFile(ifile)$data
df[1:4,]
shiny::runApp()
shiny::runApp()
ifile="../DataprogramEnotversion2.txt"
ifile="../CT26 CRMs Final File.txt"
df=loadFile(ifile)$data
tmp=strsplit(gsub("\"","",scan(ifile,sep="\n",what="raw")),"\t")
whichtps=grep("^[0-9]+$",tmp[[1]])
whichgrp=which(tmp[[1]]=="Grp")
whichid=grep("^[MIDmid]+$",tmp[[1]])
if(length(whichid)>1) whichid=whichid[1]
whichuse=grep("^[USEuse]{3}$",tmp[[1]])
if(length(whichuse)>1) whichuse=whichuse[1]
ids=sapply(tmp,function(x) gsub(" ","",x[whichid]))
grps=sapply(tmp,function(x) gsub(" ","",x[whichgrp]))
if(length(whichid)==0){
ids=paste(substr(grps,1,3),".M",sep="")
for(k in unique(ids)) ids[ids==k]=paste(ids[ids==k],1:sum(ids==k),sep="")
}
use=rep(TRUE,length(grps))
if(length(whichuse)==1) use=sapply(tmp,function(x) x[whichuse])!=""
lmices=which(ids!="" & grps!="")
lmices=lmices[lmices>2]
uids=gsub(" ","",ids[lmices])
while(any(table(uids)>1)){
iredu=names(which(table(uids)>1))[1]
uids[uids==iredu]=paste(uids[uids==iredu],1:sum(uids==iredu),sep=".")
}
use=use[lmices]
grps=grps[lmices]
names(grps)=names(use)=uids
mat=t(sapply(lmices,function(x) as.numeric(gsub(",",".",tmp[[x]][whichtps]))))
lmeas=tmp[[2]][whichtps]=gsub(" ","",tmp[[2]][whichtps])
umeas=unique(lmeas)
## here chk .log
if(length(grep("\\.log$",umeas))>0){
llog=grep("\\.log$",umeas)
llog=llog[sapply(llog,function(x) gsub("\\.log$","",umeas[x])%in%umeas)]
if(length(llog)>0) umeas=umeas[-llog]
whichtps=whichtps[lmeas%in%umeas]
}
lmeas=tmp[[2]][whichtps]
ltps=as.numeric(tmp[[1]][whichtps])
allmeas=lapply(unique(lmeas),function(imeas){
l=which(lmeas==imeas)
df=data.frame(X=as.vector(mat[,l]),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
names(df)[1]=imeas
df
})
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df
for(i in unique(lmeas)){
v=log(df[,i])
if(!imputezer) v[is.infinite(v)]=NA
if(imputezer) v[is.infinite(v)]=log(min(v[v>0],na.rm=T)/2)
if(sum(is.na(v) | is.infinite(v))<(nrow(df)*.3))  df[,paste(i,"log",sep=".")]=v
}
sum(is.na(v) | is.infinite(v))
nrow(df)
imputezer=TRUE;trim=TRUE
umeas
lmeas
tmp=strsplit(gsub("\"","",scan(ifile,sep="\n",what="raw")),"\t")
whichtps=grep("^[0-9]+$",tmp[[1]])
whichgrp=which(tmp[[1]]=="Grp")
whichid=grep("^[MIDmid]+$",tmp[[1]])
if(length(whichid)>1) whichid=whichid[1]
whichuse=grep("^[USEuse]{3}$",tmp[[1]])
if(length(whichuse)>1) whichuse=whichuse[1]
ids=sapply(tmp,function(x) gsub(" ","",x[whichid]))
grps=sapply(tmp,function(x) gsub(" ","",x[whichgrp]))
if(length(whichid)==0){
ids=paste(substr(grps,1,3),".M",sep="")
for(k in unique(ids)) ids[ids==k]=paste(ids[ids==k],1:sum(ids==k),sep="")
}
use=rep(TRUE,length(grps))
if(length(whichuse)==1) use=sapply(tmp,function(x) x[whichuse])!=""
lmices=which(ids!="" & grps!="")
lmices=lmices[lmices>2]
uids=gsub(" ","",ids[lmices])
while(any(table(uids)>1)){
iredu=names(which(table(uids)>1))[1]
uids[uids==iredu]=paste(uids[uids==iredu],1:sum(uids==iredu),sep=".")
}
use=use[lmices]
grps=grps[lmices]
names(grps)=names(use)=uids
mat=t(sapply(lmices,function(x) as.numeric(gsub(",",".",tmp[[x]][whichtps]))))
lmeas=tmp[[2]][whichtps]=gsub(" ","",tmp[[2]][whichtps])
umeas=unique(lmeas)
## here chk .log
if(length(grep("\\.log$",umeas))>0){
llog=grep("\\.log$",umeas)
llog=llog[sapply(llog,function(x) gsub("\\.log$","",umeas[x])%in%umeas)]
if(length(llog)>0) umeas=umeas[-llog]
whichtps=whichtps[lmeas%in%umeas]
}
lmeas=tmp[[2]][whichtps]
ltps=as.numeric(tmp[[1]][whichtps])
allmeas=lapply(unique(lmeas),function(imeas){
l=which(lmeas==imeas)
df=data.frame(X=as.vector(mat[,l]),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
names(df)[1]=imeas
df
})
allmeas
length(allmeas)
imeas=lmeas[1]
imeas
unique(lmeas)
imeas="V"
l=which(lmeas==imeas)
df=data.frame(X=as.vector(mat[,l]),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
names(df)[1]=imeas
df
order(df$Id,df$tp)
df[order(df$Id,df$tp),]
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),4),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
names(df)[1]=imeas
df[order(df$Id,df$tp),]
df=df[order(df$Id,df$tp),]
tapply(df[,1],df$Id,c)
idf=df[df$Id==12,]
idf
idf=df[df$Id==13,]
idf
idf=df[df$Id==13,]
idf=df[df$Id==13,]
idf=idf[order(idf$Id,idf$tp),]
diff(df[,1])
diff(idf[,1])
idf=idf[order(-idf$tp),]
diff(idf[,1])
diff(idf[,1])==0 & idf[-nrow(idf),1]!=0
l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]!=0)
idf
idf=df[df$Id==13,]
idf=idf[order(-idf$tp),]
l2excl
1:length(l2excl)
l2excl==(1:length(l2excl))
l2excl[l2excl==(1:length(l2excl))]
rownames(idf)[l2excl]
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]!=0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
l2rm
ipid="10"
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
idf
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),4),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]!=0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
if(length(l2rm)>0){
cat("Excl in",imeas,l2rm,"\n",sep=" ")
}
df[l2rm,]
df[l2rm,1]=NA
names(allmeas)
allmeas=list()
for(imeas in unique(lmeas)){
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),4),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]!=0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
if(length(l2rm)>0){
cat("Excl in",imeas,":",l2rm,"\n",sep=" ")
df[l2rm,1]=NA
}
names(df)[1]=imeas
allmeas[[imeas]]=df
}
unique(lmeas)
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
rowSums(is.na(df[,unique(lmeas),drop=F]))
df[,unique(lmeas),drop=F]
table(rowSums(is.na(df[,unique(lmeas),drop=F])))
df[l2rm,unique(lmeas),drop=F]
length(unique(lmeas))
rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas))
table(rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)))
source('~/Stats/Shiny/TumGrowth/files.R')
shiny::runApp()
shiny::runApp()
ifile="../CT26 CRMs Final File.txt"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
df$V.log
plot(df$V.log,df$V)
which(df$V.log[df$V.log<2])
df$V.log[which(df$V.log<2)]
df[which(df$V.log<2),]
shiny::runApp()
plot(df$L.log,df$L)
df[which(df$L.log<1),]
shiny::runApp()
setwd("~/Stats/Shiny/TumGrowth/")
rm(list=ls())
source("helpers.R")
source("files.R")
source("long.R")
source("km.R")
source("cs.R")
source("plotexport.R")
ifile="../DataprogramEnotversion2.txt"
ifile="../CT26 CRMs Final File.txt"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
df[which(df$L.log<1),]
plot(df$L.log,df$L)
plotTC3(df,"V",lgrps)
plotTC3(df,"V","HC")
plotTC3(df,"L","HC")
plotTC3(df,"L.log","HC")
plotTC3(df,"L.log",c("NF"))
df[df$grp=="NF",]
resp="L.log"
shiny::runApp()
source('~/Stats/Shiny/TumGrowth/helpers.R')
plotTC3(df,"L.log",c("NF"))
plotTC3(df,"L.log",c("HC"))
plotTC3(df,"L.log",c("HC"),force2zero = T)
log(2)
shiny:::runGitHub("TumGrowth", "tonedivad")
shiny::runApp()
