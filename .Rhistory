source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Mice')
source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Fit')
source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Fit')
source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Fit')
datdiag=diagm
tmpresf=datdiag$data[,c("resid","Fit" ,"Tp" ,"Grp","Id","color")]
gam(resid~s(Fit),tmpresf)
library(mgcv)
gam(resid~s(Fit),tmpresf)
names(tmpresf)[1:2]=c("y","x")
gam(y~s(x),tmpresf)
gam(y~s(x),data=tmpresf)
plot(gam(y~s(x),data=tmpresf))
mgcv:::gam(y~s(x),data=tmpresf)
predict(mgcv:::gam(y~s(x),data=tmpresf),new.data=data.frame(x=seq(min(limyfit),max(limyfit),length=100)))
predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=data.frame(x=seq(min(limyfit),max(limyfit),length=100)))
names(tmpresf)[1:2]=c("y","x")
limxqq=datdiag$limxqq
limyfit=pretty(tmpresf$x)
predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=data.frame(x=seq(min(limyfit),max(limyfit),length=100)))
predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=data.frame(x=seq(min(limyfit),max(limyfit),length=100)),se=T)
ndf=data.frame(x=seq(min(limyfit),max(limyfit),length=100))
predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=ndf)
?predict.gam
as.data.frame(predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=ndf,))
as.data.frame(predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=ndf,se=T))
ndf=data.frame(x=seq(min(limyfit),max(limyfit),length=100))
ndf=cbind(ndf,as.data.frame(predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=ndf,se=T)))
ndf
ndf$x
as.list(cbind(x=ndf$x,y=ndf$fit))
list(apply(cbind(x=ndf$x,y=ndf$fit),1,as.list)
)
apply(cbind(x=ndf$x,y=ndf$fit),1,as.list)
c <- rCharts::Highcharts$new()
c$series(data = list(list(x=min(limyfit),y=0),list(x=max(limyfit),y=0)), name='reg',type = "line",color='grey',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
ndf=data.frame(x=seq(min(limyfit),max(limyfit),length=100))
ndf=cbind(ndf,as.data.frame(predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=ndf,se=T)))
c$series(data = apply(cbind(x=ndf$x,y=ndf$fit),1,as.list), name='reg',type = "line",color='grey',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
c
c <- rCharts::Highcharts$new()
c$series(data = list(list(x=min(limyfit),y=0),list(x=max(limyfit),y=0)), name='reg',type = "line",color='grey',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
ndf=data.frame(x=seq(min(limyfit),max(limyfit),length=100))
ndf=cbind(ndf,as.data.frame(predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=ndf,se=T)))
c$series(data = list(apply(cbind(x=ndf$x,y=ndf$fit),1,as.list)), name='reg',type = "line",color='grey',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
c
list(list(x=min(limyfit),y=0),list(x=max(limyfit),y=0))
list(apply(cbind(x=ndf$x,y=ndf$fit),1,as.list))
apply(cbind(x=ndf$x,y=ndf$fit),1,as.list))
apply(cbind(x=ndf$x,y=ndf$fit),1,as.list)
unname(apply(cbind(x=ndf$x,y=ndf$fit),1,as.list))
c <- rCharts::Highcharts$new()
c$series(data = list(list(x=min(limyfit),y=0),list(x=max(limyfit),y=0)), name='reg',type = "line",color='grey',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
ndf=data.frame(x=seq(min(limyfit),max(limyfit),length=100))
ndf=cbind(ndf,as.data.frame(predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=ndf,se=T)))
c$series(data = unname(apply(cbind(x=ndf$x,y=ndf$fit),1,as.list)), name='reg',type = "line",color='grey',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
c
c <- rCharts::Highcharts$new()
c$series(data = list(list(x=min(limyfit),y=0),list(x=max(limyfit),y=0)), name='reg',type = "line",color='grey',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
ndf=data.frame(x=seq(min(limyfit),max(limyfit),length=100))
ndf=cbind(ndf,as.data.frame(predict(mgcv:::gam(y~s(x),data=tmpresf),newdata=ndf,se=T)))
c$series(data = unname(apply(cbind(x=ndf$x,y=ndf$fit),1,as.list)), name='sm',type = "line",color='red',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
c$series(data = unname(apply(cbind(x=ndf$x,y=ndf$fit-ndf$se.fit),1,as.list)), name='sm',type = "line",color='red',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
c$series(data = unname(apply(cbind(x=ndf$x,y=ndf$fit+ndf$se.fit),1,as.list)), name='sm',type = "line",color='red',
enableMouseTracking=FALSE,showInLegend = FALSE, marker= list(enabled = FALSE))
c
source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Fit')
source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Fit')
source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Fit')
shiny::runApp('~/Stats/Shiny/TumGrowth')
datdiag
source('~/Stats/Shiny/TumGrowth/longlmer.R')
datdiag=prepDiagLG(lgres)
datdiag$Type
lgres=compModLGpw(lgmat,bfco=0.2)
datdiag=prepDiagLG(lgres)
source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Fit')
diagm=prepDiagLG(lgres)
source('~/Stats/Shiny/TumGrowth/helpers.R');plotDiag(diagm,typplot='Resid/Fit')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shinytheme("cosmo")
shinytheme
system.file("shinythemes/css", package = "shinythemes")
?includeCSS
"h4 { font-size: 16px; font-weight: 700; color: #444444}"
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/Stats/Shiny/TumGrowth')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a()
a
shiny::runApp()
shiny::runApp()
titlePanel
titlePanel('tt')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sliderInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
sliderInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
checkboxGroupInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
radioButtons
checkboxGroupInput
shiny::runApp()
shiny::runApp()
checkboxInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
checkboxInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
checkboxGroupInput
shiny::runApp()
checkboxGroupInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rsconnect::setAccountInfo(name='kroemerlab',
token='B6E8D8866FDA2B3D4CF2D7E99EDA7350',
secret='cTlEavVMW7uQXiz7MOhEYjo9ZoVeEin0+8hZBcyI')
shiny::runApp()
shiny::runApp()
shiny::runApp()
checkboxGroupInput
shiny::runApp()
validateSelected
generateOptions
validateCssUnit
controlLabel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
checkboxGroupInput2("tcfplottyp","Display",
choices=list("Time courses"="tc","Mean/SE"="mese","Mean/SD"="mesd"),
selected='tc',inline=TRUE)
checkboxGroupInput2<-function (inputId, label, choices, selected = NULL, inline = FALSE,
width = NULL)
{
choices <- shiny:::choicesWithNames(choices)
if (!is.null(selected))
selected <- shiny:::validateSelected(selected, choices, inputId)
options <- shiny:::generateOptions(inputId, choices, selected, inline)
divClass <- "form-group shiny-input-checkboxgroup shiny-input-container"
if (inline)
divClass <- paste(divClass, "shiny-input-container-inline")
divClass=paste(divClass,"for='group'")
istyle=''
if (!is.null(width))
istyle=paste0("width: ", validateCssUnit(width), ";")
tags$div(id = inputId, style = istyle, class = divClass,
shiny:::controlLabel(inputId, label), options)
}
checkboxGroupInput2("tcfplottyp","Display",
choices=list("Time courses"="tc","Mean/SE"="mese","Mean/SD"="mesd"),
selected='tc',inline=TRUE)
shiny::runApp()
shiny::runApp()
shiny:::choicesWithNames(choices)
shiny:::choicesWithNames(LETTERS[1:3])
choices=shiny:::choicesWithNames(LETTERS[1:3])
selected=NULL
inputId
inputId='tt'
shiny:::generateOptions(inputId, choices, selected, inline)
shiny:::generateOptions(inputId, choices, selected, T)
shiny:::generateOptions
shiny:::generateOptions(inputId, choices, selected, T)
shiny::runApp()
shiny::runApp()
re=checkboxGroupInput2("tcfplottyp","Display",
choices=list("Time courses"="tc","Mean/SE"="mese","Mean/SD"="mesd"),
selected='tc',inline=TRUE)
selected
inline
type = "checkbox"
inline=T
options <- mapply(choices, names(choices), FUN = function(value,
name) {
inputTag <- tags$input(type = type, name = inputId, value = value)
if (value %in% selected)
inputTag$attribs$checked <- "checked"
if (inline) {
tags$label(class = paste0(type, "-inline"), inputTag,
tags$span(name))
}
else {
tags$div(class = type, tags$label(inputTag, tags$span(name)))
}
}, SIMPLIFY = FALSE, USE.NAMES = FALSE)
options
options <- mapply(choices, names(choices), FUN = function(value,
name) {
inputTag <- tags$input(type = type, name = inputId, value = value)
if (value %in% selected)
inputTag$attribs$checked <- "checked"
if (inline) {
tags$label(class = paste0(type, "-inline"), inputTag,
tags$span(name),tags$label('grp'))
}
else {
tags$div(class = type, tags$label(inputTag, tags$span(name)))
}
}, SIMPLIFY = FALSE, USE.NAMES = FALSE)
div(class = "shiny-options-group", options)
options <- mapply(choices, names(choices), FUN = function(value,
name) {
inputTag <- tags$input(type = type, name = inputId, value = value)
if (value %in% selected)
inputTag$attribs$checked <- "checked"
if (inline) {
tags$label(class = paste0(type, "-inline"), inputTag,
tags$span(name),tags$label(class='label' ))
}
else {
tags$div(class = type, tags$label(inputTag, tags$span(name)))
}
}, SIMPLIFY = FALSE, USE.NAMES = FALSE)
div(class = "shiny-options-group", options)
options <- mapply(choices, names(choices), FUN = function(value,
name) {
inputTag <- tags$input(type = type, name = inputId, value = value)
if (value %in% selected)
inputTag$attribs$checked <- "checked"
if (inline) {
tags$label(class = paste0(type, "-inline"), inputTag,
tags$span(name),tags$label(class='label' ,for='grp'))
}
else {
tags$div(class = type, tags$label(inputTag, tags$span(name)))
}
}, SIMPLIFY = FALSE, USE.NAMES = FALSE)
div(class = "shiny-options-group", options)
options <- mapply(choices, names(choices), FUN = function(value,
name) {
inputTag <- tags$input(type = type, name = inputId, value = value)
if (value %in% selected)
inputTag$attribs$checked <- "checked"
if (inline) {
tags$label(class = paste0(type, "-inline"), inputTag,
tags$span(name),tags$label("class='label' ,for='grp'"))
}
else {
tags$div(class = type, tags$label(inputTag, tags$span(name)))
}
}, SIMPLIFY = FALSE, USE.NAMES = FALSE)
div(class = "shiny-options-group", options)
options <- mapply(choices, names(choices), FUN = function(value,
name) {
inputTag <- tags$input(type = type, name = inputId, value = value)
if (value %in% selected)
inputTag$attribs$checked <- "checked"
if (inline) {
tags$label(class = paste0(type, "-inline"), inputTag,
tags$span(name),tags$label("class='label' for='grp'"))
}
else {
tags$div(class = type, tags$label(inputTag, tags$span(name)))
}
}, SIMPLIFY = FALSE, USE.NAMES = FALSE)
div(class = "shiny-options-group", options)
source('~/Desktop/TG2002/helpers.R')
mygenerateOptions(inputId, choices, selected, inline, type = "checkbox",taglab=NULL)
mygenerateOptions(inputId, choices, selected, inline, type = "checkbox",taglab=NULL)
source('~/Desktop/TG2002/helpers.R')
mygenerateOptions(inputId, choices, selected, inline, type = "checkbox",taglab=NULL)
source('~/Desktop/TG2002/helpers.R')
mygenerateOptions(inputId, choices, selected, inline, type = "checkbox",taglab=NULL)
source('~/Desktop/TG2002/helpers.R')
shiny::runApp()
shiny::runApp()
checkboxGroupInput2("tcfplottyp","Display",
choices=list("Time courses"="tc","Mean/SE"="mese","Mean/SD"="mesd"),
selected='tc',inline=TRUE,taglab="class='label' for='group'")
checkboxGroupInput2<-function (inputId, label, choices, selected = NULL, inline = FALSE,
width = NULL,taglab=NULL)
{
choices <- shiny:::choicesWithNames(choices)
if (!is.null(selected))
selected <- shiny:::validateSelected(selected, choices, inputId)
options <- mygenerateOptions(inputId, choices, selected, inline,taglab=taglab)
divClass <- "form-group shiny-input-checkboxgroup shiny-input-container"
if (inline)
divClass <- paste(divClass, "shiny-input-container-inline")
divClass=paste(divClass,"for='group'")
istyle=''
if (!is.null(width))
istyle=paste0("width: ", validateCssUnit(width), ";")
tags$div(id = inputId, style = istyle, class = divClass,
shiny:::controlLabel(inputId, label), options)
}
checkboxGroupInput2("tcfplottyp","Display",
choices=list("Time courses"="tc","Mean/SE"="mese","Mean/SD"="mesd"),
selected='tc',inline=TRUE,taglab="class='label' for='group'")
shiny::runApp()
source('~/Desktop/TG2002/helpers.R')
shiny::runApp()
source('~/Desktop/TG2002/helpers.R')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
checkboxGroupInput2("tcfplottyp","Display",
choices=list("Time courses"="tc","Mean/SE"="mese","Mean/SD"="mesd"),
selected='tc',inline=TRUE,taglab=" for='group'")
source('~/Desktop/TG2002/helpers.R')
tags$label
tags$label()
tags$label(for='tt')
source('~/Desktop/TG2002/helpers.R')
checkboxGroupInput2("tcfplottyp","Display",
choices=list("Time courses"="tc","Mean/SE"="mese","Mean/SD"="mesd"),
selected='tc',inline=TRUE,taglab="group")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
checkboxGroupInput2("tcfplottyp","Display",
choices=list("Time courses"="tc","Mean/SE"="mese","Mean/SD"="mesd"),
selected='tc',inline=TRUE,taglab="group")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
read.table('Toy',sep='\t',stringsAsFactors = F)
read.table('Toy',sep='\t',stringsAsFactors = F,header=T)
read.table('Toy',sep='\t',stringsAsFactors = F,header=F)
require(pander)
tab=read.table('Toy',sep='\t',stringsAsFactors = F,header=F)
colnames(tab)=rownames(tab)=NULL
panderOptions('table.split.table', Inf)
pander(tab)
HTML(paste(knit2html(text = 'help/About-upload.md', fragment.only = TRUE, quiet = TRUE), '<script>', 'MathJax.Hub.Typeset();', '</script>', sep = '\n'))
library(knitr)
HTML(paste(knit2html(text = 'help/About-upload.md', fragment.only = TRUE, quiet = TRUE), '<script>', 'MathJax.Hub.Typeset();', '</script>', sep = '\n'))
includeMarkdown
knit2html(text = 'help/About-upload.md', fragment.only = TRUE, quiet = TRUE)
(knit2html(text = 'help/About-upload.md', fragment.only = TRUE, quiet = TRUE))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
