runGitHub("TumGrowth", "tonedivad")
shiny:::runGitHub("TumGrowth", "tonedivad")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Stats/Shiny/TumGrowth/")
rm(list=ls())
source("helpers.R")
source("files.R")
source("long.R")
source("km.R")
source("cs.R")
source("plotexport.R")
ifile="../CT26 CRMs Final File.txt"
df=loadFile(ifile)$data
df
df=loadFile(ifile)$data
df[1:4,]
shiny::runApp()
shiny::runApp()
ifile="../DataprogramEnotversion2.txt"
ifile="../CT26 CRMs Final File.txt"
df=loadFile(ifile)$data
tmp=strsplit(gsub("\"","",scan(ifile,sep="\n",what="raw")),"\t")
whichtps=grep("^[0-9]+$",tmp[[1]])
whichgrp=which(tmp[[1]]=="Grp")
whichid=grep("^[MIDmid]+$",tmp[[1]])
if(length(whichid)>1) whichid=whichid[1]
whichuse=grep("^[USEuse]{3}$",tmp[[1]])
if(length(whichuse)>1) whichuse=whichuse[1]
ids=sapply(tmp,function(x) gsub(" ","",x[whichid]))
grps=sapply(tmp,function(x) gsub(" ","",x[whichgrp]))
if(length(whichid)==0){
ids=paste(substr(grps,1,3),".M",sep="")
for(k in unique(ids)) ids[ids==k]=paste(ids[ids==k],1:sum(ids==k),sep="")
}
use=rep(TRUE,length(grps))
if(length(whichuse)==1) use=sapply(tmp,function(x) x[whichuse])!=""
lmices=which(ids!="" & grps!="")
lmices=lmices[lmices>2]
uids=gsub(" ","",ids[lmices])
while(any(table(uids)>1)){
iredu=names(which(table(uids)>1))[1]
uids[uids==iredu]=paste(uids[uids==iredu],1:sum(uids==iredu),sep=".")
}
use=use[lmices]
grps=grps[lmices]
names(grps)=names(use)=uids
mat=t(sapply(lmices,function(x) as.numeric(gsub(",",".",tmp[[x]][whichtps]))))
lmeas=tmp[[2]][whichtps]=gsub(" ","",tmp[[2]][whichtps])
umeas=unique(lmeas)
## here chk .log
if(length(grep("\\.log$",umeas))>0){
llog=grep("\\.log$",umeas)
llog=llog[sapply(llog,function(x) gsub("\\.log$","",umeas[x])%in%umeas)]
if(length(llog)>0) umeas=umeas[-llog]
whichtps=whichtps[lmeas%in%umeas]
}
lmeas=tmp[[2]][whichtps]
ltps=as.numeric(tmp[[1]][whichtps])
allmeas=lapply(unique(lmeas),function(imeas){
l=which(lmeas==imeas)
df=data.frame(X=as.vector(mat[,l]),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
names(df)[1]=imeas
df
})
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df
for(i in unique(lmeas)){
v=log(df[,i])
if(!imputezer) v[is.infinite(v)]=NA
if(imputezer) v[is.infinite(v)]=log(min(v[v>0],na.rm=T)/2)
if(sum(is.na(v) | is.infinite(v))<(nrow(df)*.3))  df[,paste(i,"log",sep=".")]=v
}
sum(is.na(v) | is.infinite(v))
nrow(df)
imputezer=TRUE;trim=TRUE
umeas
lmeas
tmp=strsplit(gsub("\"","",scan(ifile,sep="\n",what="raw")),"\t")
whichtps=grep("^[0-9]+$",tmp[[1]])
whichgrp=which(tmp[[1]]=="Grp")
whichid=grep("^[MIDmid]+$",tmp[[1]])
if(length(whichid)>1) whichid=whichid[1]
whichuse=grep("^[USEuse]{3}$",tmp[[1]])
if(length(whichuse)>1) whichuse=whichuse[1]
ids=sapply(tmp,function(x) gsub(" ","",x[whichid]))
grps=sapply(tmp,function(x) gsub(" ","",x[whichgrp]))
if(length(whichid)==0){
ids=paste(substr(grps,1,3),".M",sep="")
for(k in unique(ids)) ids[ids==k]=paste(ids[ids==k],1:sum(ids==k),sep="")
}
use=rep(TRUE,length(grps))
if(length(whichuse)==1) use=sapply(tmp,function(x) x[whichuse])!=""
lmices=which(ids!="" & grps!="")
lmices=lmices[lmices>2]
uids=gsub(" ","",ids[lmices])
while(any(table(uids)>1)){
iredu=names(which(table(uids)>1))[1]
uids[uids==iredu]=paste(uids[uids==iredu],1:sum(uids==iredu),sep=".")
}
use=use[lmices]
grps=grps[lmices]
names(grps)=names(use)=uids
mat=t(sapply(lmices,function(x) as.numeric(gsub(",",".",tmp[[x]][whichtps]))))
lmeas=tmp[[2]][whichtps]=gsub(" ","",tmp[[2]][whichtps])
umeas=unique(lmeas)
## here chk .log
if(length(grep("\\.log$",umeas))>0){
llog=grep("\\.log$",umeas)
llog=llog[sapply(llog,function(x) gsub("\\.log$","",umeas[x])%in%umeas)]
if(length(llog)>0) umeas=umeas[-llog]
whichtps=whichtps[lmeas%in%umeas]
}
lmeas=tmp[[2]][whichtps]
ltps=as.numeric(tmp[[1]][whichtps])
allmeas=lapply(unique(lmeas),function(imeas){
l=which(lmeas==imeas)
df=data.frame(X=as.vector(mat[,l]),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
names(df)[1]=imeas
df
})
allmeas
length(allmeas)
imeas=lmeas[1]
imeas
unique(lmeas)
imeas="V"
l=which(lmeas==imeas)
df=data.frame(X=as.vector(mat[,l]),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
names(df)[1]=imeas
df
order(df$Id,df$tp)
df[order(df$Id,df$tp),]
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),4),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
names(df)[1]=imeas
df[order(df$Id,df$tp),]
df=df[order(df$Id,df$tp),]
tapply(df[,1],df$Id,c)
idf=df[df$Id==12,]
idf
idf=df[df$Id==13,]
idf
idf=df[df$Id==13,]
idf=df[df$Id==13,]
idf=idf[order(idf$Id,idf$tp),]
diff(df[,1])
diff(idf[,1])
idf=idf[order(-idf$tp),]
diff(idf[,1])
diff(idf[,1])==0 & idf[-nrow(idf),1]!=0
l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]!=0)
idf
idf=df[df$Id==13,]
idf=idf[order(-idf$tp),]
l2excl
1:length(l2excl)
l2excl==(1:length(l2excl))
l2excl[l2excl==(1:length(l2excl))]
rownames(idf)[l2excl]
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]!=0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
l2rm
ipid="10"
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
idf
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),4),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]!=0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
if(length(l2rm)>0){
cat("Excl in",imeas,l2rm,"\n",sep=" ")
}
df[l2rm,]
df[l2rm,1]=NA
names(allmeas)
allmeas=list()
for(imeas in unique(lmeas)){
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),4),Id=rep(uids,length(l)),
tp=rep(ltps[l],each=nrow(mat)),stringsAsFactors = F)
rownames(df)=paste(df$tp,df$Id,sep=";;")
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]!=0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
if(length(l2rm)>0){
cat("Excl in",imeas,":",l2rm,"\n",sep=" ")
df[l2rm,1]=NA
}
names(df)[1]=imeas
allmeas[[imeas]]=df
}
unique(lmeas)
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
rowSums(is.na(df[,unique(lmeas),drop=F]))
df[,unique(lmeas),drop=F]
table(rowSums(is.na(df[,unique(lmeas),drop=F])))
df[l2rm,unique(lmeas),drop=F]
length(unique(lmeas))
rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas))
table(rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)))
source('~/Stats/Shiny/TumGrowth/files.R')
shiny::runApp()
shiny::runApp()
ifile="../CT26 CRMs Final File.txt"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
df$V.log
plot(df$V.log,df$V)
which(df$V.log[df$V.log<2])
df$V.log[which(df$V.log<2)]
df[which(df$V.log<2),]
shiny::runApp()
plot(df$L.log,df$L)
df[which(df$L.log<1),]
shiny::runApp()
setwd("~/Stats/Shiny/TumGrowth/")
rm(list=ls())
source("helpers.R")
source("files.R")
source("long.R")
source("km.R")
source("cs.R")
source("plotexport.R")
ifile="../DataprogramEnotversion2.txt"
ifile="../CT26 CRMs Final File.txt"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
df[which(df$L.log<1),]
plot(df$L.log,df$L)
plotTC3(df,"V",lgrps)
plotTC3(df,"V","HC")
plotTC3(df,"L","HC")
plotTC3(df,"L.log","HC")
plotTC3(df,"L.log",c("NF"))
df[df$grp=="NF",]
resp="L.log"
shiny::runApp()
source('~/Stats/Shiny/TumGrowth/helpers.R')
plotTC3(df,"L.log",c("NF"))
plotTC3(df,"L.log",c("HC"))
plotTC3(df,"L.log",c("HC"),force2zero = T)
log(2)
shiny:::runGitHub("TumGrowth", "tonedivad")
shiny::runApp()
shiny::runApp()
setwd("~/Stats/Shiny/TumGrowth/")
rm(list=ls())
source("helpers.R")
source("files.R")
source("long.R")
source("km.R")
source("cs.R")
source("plotexport.R")
ifile="../DataprogramEnotversion2.txt"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
resp="X"
lgrps=levels(df$grp)
df$Resp=df[,resp]
df
compMod(df,lgrps,"X")
re=compMod(df,lgrps,"X")
compMod2(re,"All")
names(compMod2(re,"All"))
compMod2(re,"All")$pw
pwa=compMod2(re,"All")$pw
pw2=compMod2(re,"AUGCEOXA")$pw
pwa
pwa[1:10,]
pw2[1:10,]
pw2
ifile="./Test1"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
df[1:4,]
ifile="./Test1";resp="Z"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
lgrps=levels(df$grp)
df$Resp=df[,resp]
lgrps=levels(df$grp)
df$Resp=df[,resp]
#####
## long
re=compMod(df,lgrps,resp)
pwa=compMod2(re,"All")$pw
pw2=compMod2(re,"AUGCEOXA")$pw
pwa
pw2
ifile="./Test2";resp="Z"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
df
ifile="./Test2";resp="S"
imputezer=TRUE;trim=TRUE
df=loadFile(ifile)$data
lgrps=levels(df$grp)
df$Resp=df[,resp]
#####
## long
re=compMod(df,lgrps,resp)
pwa=compMod2(re,"All")$pw
pwa
pwa=compMod2(re,"All")$pw
pw2=compMod2(re,"IC.WT")$pw
pw2
objres=compMod(df,lgrps,resp)
ref='All'
idf=objres$data
ga=objres$model
ga
ct=contrMat(table(idf$grp),type="Tukey")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
ct=contrMat(table(idf$grp),type="Tukey")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
jtab=do.call("rbind",lapply(1:nrow(jt1),function(i) esticon(ga,rbind(jt1[i,],jt2[i,]),join=T)))
jt1
jt2
ref
ref="IC.KO"
idf$grp=relevel(idf$grp,ref)
ga=update(ga,data=idf)
ga
ref
idf$grp=relevel(idf$grp,ref)
gai=update(ga,data=idf)
ct=contrMat(table(idf$grp),type="Dunnet")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
jtab=do.call("rbind",lapply(1:nrow(jt1),function(i) esticon(gai,rbind(jt1[i,],jt2[i,]),join=T)))
jtab
ref
gai
ref
gai
ga
coef(gai)
coef(ga)
idf$grp
gai=update(ga,data=idf)
coef(gai)
coef(ga)
contrMat(table(idf$grp),type="Dunnet")
idf$grp=relevel(idf$grp,ref)
gai=update(ga,data=idf)
ct=contrMat(table(idf$grp),type="Dunnet")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
jtab=do.call("rbind",lapply(1:nrow(jt1),function(i) esticon(gai,rbind(jt1[i,],jt2[i,]),join=T)))
jtab
ct=contrMat(table(idf$grp),type="Tukey")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
jtab=do.call("rbind",lapply(1:nrow(jt1),function(i) esticon(ga,rbind(jt1[i,],jt2[i,]),join=T)))
jtab
idf$grp
lgrps
idf=objres$data
ga=objres$model
ct=contrMat(table(idf$grp),type="Tukey")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
jtab=do.call("rbind",lapply(1:nrow(jt1),function(i) esticon(ga,rbind(jt1[i,],jt2[i,]),join=T)))
jtab
i=2
esticon(ga,rbind(jt1[i,],jt2[i,]),join=T)
esticon(ga,rbind(jt1[i,],jt2[i,]))
idf$grp=relevel(idf$grp,ref)
gai=update(ga,data=idf)
ct=contrMat(table(idf$grp),type="Dunnet")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
esticon(gai,rbind(jt1[i,],jt2[i,]),join=T)
esticon(gai,rbind(jt1[1,],jt2[1,]))
coef(gai)
coef(ga)
ref
gai
ga
idf=objres$data
ga=objres$model
ct=contrMat(table(idf$grp),type="Tukey")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
ct=contrMat(table(idf$grp),type="Tukey")[,-1,drop=F]
jt1=cbind(0,0,ct,matrix(0,nrow=nrow(ct),ncol=ncol(ct)))
jt2=cbind(0,0,matrix(0,nrow=nrow(ct),ncol=ncol(ct)),ct)
jt1
contrMat(table(idf$grp),type="Dunnet")
contrMat(table(idf$grp),type="Dunnet",base = 1)
contrMat(table(idf$grp),type="Dunnet",base = ref)
contrMat(table(idf$grp),type="Dunnet",base = which)
ga
gai
ga$varBeta
ga$sigma
ga$apVar
names(ga)
ga$modelStruct
names(ga$modelStruct)
is.null(ga$modelStruct$varStruct)
gai=update(ga,data=idf)
is.null(gai$modelStruct$varStruct)
gai=update(ga,data=idf,weights(=NULL))
gai=update(ga,data=idf,weights=NULL)
is.null(gai$modelStruct$varStruct)
idf$out
gai=update(ga,data=idf[!idf$out,])
update(ga,data=idf[!idf$out,])
ga
shiny::runApp()
df$Use
shiny::runApp()
shiny::runApp()
shiny::runApp()
c()%in%lgrps
shiny::runApp()
shiny::runApp()
library(DT)
datatable(head(mtcars))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
app = system.file('examples', 'DT-rows', package = 'DT')
shiny::runApp(app)
shiny::runApp()
app = system.file('examples', 'DT-rows', package = 'DT')
shiny::runApp(app)
shiny::runApp()
1:5%in%NULL
shiny::runApp()
?eventReactive
## Only run this example in interactive R sessions
if (interactive()) {
ui <- fluidPage(
column(4,
numericInput("x", "Value", 5),
br(),
actionButton("button", "Show")
),
column(8, tableOutput("table"))
)
server <- function(input, output) {
# Take an action every time button is pressed;
# here, we just print a message to the console
observeEvent(input$button, {
cat("Showing", input$x, "rows\n")
})
# Take a reactive dependency on input$button, but
# not on any of the stuff inside the function
df <- eventReactive(input$button, {
head(cars, input$x)
})
output$table <- renderTable({
df()
})
}
shinyApp(ui=ui, server=server)
}
shiny::runApp()
library(shiny)
if (packageVersion('DT') < '0.1.3') devtools::install_github('rstudio/DT')
library(help=DT)
