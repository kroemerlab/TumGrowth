df[,c(which(names(df)%in%lResp),which(!names(df)%in%lResp))]
df=df[,c(which(names(df)%in%lResp),which(!names(df)%in%lResp))]
setday0
shiny::runApp()
shiny::runApp()
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df$tp=as.numeric(gsub(";;.*","",rownames(df)))
df$Id=gsub("^[0-9]+;;","",rownames(df))
df$Use=use[df$Id]
df$grp=factor(grps[df$Id],levels = unique(grps))
rownames(df)=1:nrow(df)
df=df[order(df$grp,!df$Use,df$Id,df$tp),]
lResp=unique(lmeas)
ftp=tapply(1:nrow(df),df$Id,function(x) sapply(lResp,function(y) min(df$tp[x[min(which(df[x,y]>0))]])))
ftp
for(i in names(ftp)){
if(any(df$Id==i & df$tp<ftp[i])) for(k in lResp) df[df$Id==i & df$tp<ftp[i],k]=NA
df$tp[df$Id==i]=df$tp[df$Id==i]-ftp[i]
}
any(df$Id==i & df$tp<ftp[i])
lResp
df[df$Id==i & df$tp<ftp[i],k]
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df$tp=as.numeric(gsub(";;.*","",rownames(df)))
df$Id=gsub("^[0-9]+;;","",rownames(df))
df$Use=use[df$Id]
df$grp=factor(grps[df$Id],levels = unique(grps))
rownames(df)=1:nrow(df)
df=df[order(df$grp,!df$Use,df$Id,df$tp),]
lResp=unique(lmeas)
df[df$Id==i & df$tp<ftp[i],k]
which(df$Id==i & df$tp<ftp[i])
df[which(df$Id==i & df$tp<ftp[i]),k]
df[which(df$Id==i & df$tp<ftp[i]),]
df[which(df$Id==i),]
df$tp[df$Id==i]-ftp[i]+1
df$tp[df$Id==i]=df$tp[df$Id==i]-ftp[i]+1
df[which(df$Id==i),]
shiny::runApp()
tmp=strsplit(gsub("\"","",scan(ifile,sep="\n",what="raw")),"\t")
whichtps=grep("^[0-9]+$",tmp[[1]])
whichgrp=grep("^[group]+$",tolower(tmp[[1]]))[1]
whichid=grep("^[MIDmid]+$",tmp[[1]])
if(length(whichid)>1) whichid=whichid[1]
whichuse=grep("^[USEuse]{3}$",tmp[[1]])
if(length(whichuse)>1) whichuse=whichuse[1]
grps=sapply(tmp,function(x) gsub(" ","",x[whichgrp]))
if(length(whichid)==0){
ids=paste(substr(grps,1,3),".M",sep="")
for(k in unique(ids)) ids[ids==k]=paste(ids[ids==k],1:sum(ids==k),sep="")
} else ids=sapply(tmp,function(x) gsub(" ","",x[whichid]))
use=rep(TRUE,length(grps))
if(length(whichuse)==1) use=sapply(tmp,function(x) x[whichuse])!=""
lmices=which(ids!="" & grps!="")
lmices=lmices[lmices>2]
uids=uidsold=gsub(" ","",ids[lmices])
#if(!sumids & any(table(uids)>1)){
while(any(table(uids)>1)){
iredu=names(which(table(uids)>1))[1]
uids[uids==iredu]=paste(uids[uids==iredu],1:sum(uids==iredu),sep=".")
}
#}
use=use[lmices];grps=grps[lmices]
names(grps)=names(use)=uids
mat=t(sapply(lmices,function(x) as.numeric(gsub(",",".",tmp[[x]][whichtps]))))
lmeas=tmp[[2]][whichtps]=gsub(" ","",tmp[[2]][whichtps])
umeas=unique(lmeas)
## here chk .log
if(length(grep("\\.log$",umeas))>0){
llog=grep("\\.log$",umeas)
llog=llog[sapply(llog,function(x) gsub("\\.log$","",umeas[x])%in%umeas)]
if(length(llog)>0) umeas=umeas[-llog]
whichtps=whichtps[lmeas%in%umeas]
}
lmeas=tmp[[2]][whichtps]
ltps=as.numeric(tmp[[1]][whichtps])
exclzer
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),ndigit),Id=rep(uids,length(l)),tp=rep(ltps[l],each=nrow(mat)),
Grp=rep(grps,length(l)),Idold=rep(uidsold,length(l)),stringsAsFactors = F)
df$IdTp=paste(df$tp,df$Id,sep=";;")
df$IdoTp=paste(df$tp,df$Idold,sep=";;")
if(any(table(df$IdTp)>1)){
ldups=names(which(table(df$IdTp)>1))
cat("Duplicated time points:",ldups,"\n")
newx=tapply(df$X,df$IdTp,median,na.rm=T)
df=df[match(names(newx),df$IdTp),]
df$X=newx[df$IdTp]
}
rownames(df)=df$IdTp
df=df[order(df$Grp,df$Id,df$tp),]
l2rm=NULL
ipid
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
if(all(is.na(idf[,1]))) next
idf
while(is.na(idf[1,1]) & nrow(idf)>0) idf=idf[-1,]
exclzer
which(diff(idf[,1])==0 & idf[-nrow(idf),1]>0)
which(diff(idf[,1])==0)
exclzer
exclzer=TRUE
if(exclzer) l2excl=which(diff(idf[,1])==0)
l2excl==(1:length(l2excl))
l2excl=l2excl[l2excl==(1:length(l2excl))]
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
if(all(is.na(idf[,1]))) next
while(is.na(idf[1,1]) & nrow(idf)>0) idf=idf[-1,]
if(!exclzer) l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]>0)
if(exclzer) l2excl=which(diff(idf[,1])==0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
#     if(exclzer & any(idf[,1]==0,na.rm = TRUE)) l2excl=c(l2excl,which(idf[,1]<=0))
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
if(length(l2rm)>0){
cat("Excl in",imeas,":",l2rm,"\n",sep=" ")
df[l2rm,1]=NA
}
names(df)[1]=imeas
allmeas[[imeas]]=df
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df$tp=as.numeric(gsub(";;.*","",rownames(df)))
df$Id=gsub("^[0-9]+;;","",rownames(df))
df$Use=use[df$Id]
df$grp=factor(grps[df$Id],levels = unique(grps))
rownames(df)=1:nrow(df)
df=df[order(df$grp,!df$Use,df$Id,df$tp),]
lResp=unique(lmeas)
df
exclzer
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),ndigit),Id=rep(uids,length(l)),tp=rep(ltps[l],each=nrow(mat)),
Grp=rep(grps,length(l)),Idold=rep(uidsold,length(l)),stringsAsFactors = F)
df$IdTp=paste(df$tp,df$Id,sep=";;")
df$IdoTp=paste(df$tp,df$Idold,sep=";;")
if(any(table(df$IdTp)>1)){
ldups=names(which(table(df$IdTp)>1))
cat("Duplicated time points:",ldups,"\n")
newx=tapply(df$X,df$IdTp,median,na.rm=T)
df=df[match(names(newx),df$IdTp),]
df$X=newx[df$IdTp]
}
rownames(df)=df$IdTp
df=df[order(df$Grp,df$Id,df$tp),]
ipid
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
if(all(is.na(idf[,1]))) next
while(is.na(idf[1,1]) & nrow(idf)>0) idf=idf[-1,]
if(!exclzer) l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]>0)
if(exclzer) l2excl=which(diff(idf[,1])==0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
l2excl
shiny::runApp()
ftp=tapply(1:nrow(df),df$Id,function(x) sapply(lResp,function(y) min(df$tp[x[min(which(df[x,y]>0))]])))
ftp
df
exclzer
allmeas=list()
for(imeas in unique(lmeas)){
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),ndigit),Id=rep(uids,length(l)),tp=rep(ltps[l],each=nrow(mat)),
Grp=rep(grps,length(l)),Idold=rep(uidsold,length(l)),stringsAsFactors = F)
df$IdTp=paste(df$tp,df$Id,sep=";;")
df$IdoTp=paste(df$tp,df$Idold,sep=";;")
if(any(table(df$IdTp)>1)){
ldups=names(which(table(df$IdTp)>1))
cat("Duplicated time points:",ldups,"\n")
newx=tapply(df$X,df$IdTp,median,na.rm=T)
df=df[match(names(newx),df$IdTp),]
df$X=newx[df$IdTp]
}
rownames(df)=df$IdTp
df=df[order(df$Grp,df$Id,df$tp),]
############
## Exclude trailing zeros/NAs
if(trimzer){
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
while((is.na(idf[1,1]) | idf[1,1]==0) & nrow(idf)>0){
l2rm=c(l2rm,rownames(idf)[1])
idf=idf[-1,]
}
}
if(length(l2rm)>0){
#cat("Excl in",imeas,":",l2rm,"\n",sep=" ")
df[l2rm,1]=NA
}
}
############
## Sum at same Id/Tp
if(sumids & max(rowSums(table(df$Idold,df$Grp)>0))==1){
df=data.frame(X=tapply(df$X,df$IdoTp,function(x) ifelse(all(is.na(x)),NA,sum(x,na.rm=T))),
Id=tapply(df$Idold,df$IdoTp,unique),tp=tapply(df$tp,df$IdoTp,unique),Grp=tapply(df$Grp,df$IdoTp,unique),
stringsAsFactors = F)
df=df[order(df$Grp,df$Id,df$tp),]
names(grps)=names(use)=uidsold
}
df=df[,1:4]
############
## Remove same values from the end
if(trim){
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
if(all(is.na(idf[,1]))) next
while(is.na(idf[1,1]) & nrow(idf)>0) idf=idf[-1,]
if(!exclzer) l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]>0)
if(exclzer) l2excl=which(diff(idf[,1])==0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
#     if(exclzer & any(idf[,1]==0,na.rm = TRUE)) l2excl=c(l2excl,which(idf[,1]<=0))
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
if(length(l2rm)>0){
cat("Excl in",imeas,":",l2rm,"\n",sep=" ")
df[l2rm,1]=NA
}
}
names(df)[1]=imeas
allmeas[[imeas]]=df
}
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df$tp=as.numeric(gsub(";;.*","",rownames(df)))
df$Id=gsub("^[0-9]+;;","",rownames(df))
df$Use=use[df$Id]
df$grp=factor(grps[df$Id],levels = unique(grps))
rownames(df)=1:nrow(df)
df=df[order(df$grp,!df$Use,df$Id,df$tp),]
lResp=unique(lmeas)
df
trimzer
trimzer=F
allmeas=list()
for(imeas in unique(lmeas)){
l=which(lmeas==imeas)
df=data.frame(X=round(as.vector(mat[,l]),ndigit),Id=rep(uids,length(l)),tp=rep(ltps[l],each=nrow(mat)),
Grp=rep(grps,length(l)),Idold=rep(uidsold,length(l)),stringsAsFactors = F)
df$IdTp=paste(df$tp,df$Id,sep=";;")
df$IdoTp=paste(df$tp,df$Idold,sep=";;")
if(any(table(df$IdTp)>1)){
ldups=names(which(table(df$IdTp)>1))
cat("Duplicated time points:",ldups,"\n")
newx=tapply(df$X,df$IdTp,median,na.rm=T)
df=df[match(names(newx),df$IdTp),]
df$X=newx[df$IdTp]
}
rownames(df)=df$IdTp
df=df[order(df$Grp,df$Id,df$tp),]
############
## Exclude trailing zeros/NAs
if(trimzer){
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
while((is.na(idf[1,1]) | idf[1,1]==0) & nrow(idf)>0){
l2rm=c(l2rm,rownames(idf)[1])
idf=idf[-1,]
}
}
if(length(l2rm)>0){
#cat("Excl in",imeas,":",l2rm,"\n",sep=" ")
df[l2rm,1]=NA
}
}
############
## Sum at same Id/Tp
if(sumids & max(rowSums(table(df$Idold,df$Grp)>0))==1){
df=data.frame(X=tapply(df$X,df$IdoTp,function(x) ifelse(all(is.na(x)),NA,sum(x,na.rm=T))),
Id=tapply(df$Idold,df$IdoTp,unique),tp=tapply(df$tp,df$IdoTp,unique),Grp=tapply(df$Grp,df$IdoTp,unique),
stringsAsFactors = F)
df=df[order(df$Grp,df$Id,df$tp),]
names(grps)=names(use)=uidsold
}
df=df[,1:4]
############
## Remove same values from the end
if(trim){
l2rm=NULL
for(ipid in unique(df$Id)){
idf=df[df$Id==ipid,]
idf=idf[order(-idf$tp),]
if(all(is.na(idf[,1]))) next
while(is.na(idf[1,1]) & nrow(idf)>0) idf=idf[-1,]
if(!exclzer) l2excl=which(diff(idf[,1])==0 & idf[-nrow(idf),1]>0)
if(exclzer) l2excl=which(diff(idf[,1])==0)
if(length(l2excl)>0) l2excl=l2excl[l2excl==(1:length(l2excl))]
#     if(exclzer & any(idf[,1]==0,na.rm = TRUE)) l2excl=c(l2excl,which(idf[,1]<=0))
if(length(l2excl)>0) l2rm=c(l2rm,rownames(idf)[l2excl])
}
if(length(l2rm)>0){
cat("Excl in",imeas,":",l2rm,"\n",sep=" ")
df[l2rm,1]=NA
}
}
names(df)[1]=imeas
allmeas[[imeas]]=df
}
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df$tp=as.numeric(gsub(";;.*","",rownames(df)))
df$Id=gsub("^[0-9]+;;","",rownames(df))
df$Use=use[df$Id]
df$grp=factor(grps[df$Id],levels = unique(grps))
rownames(df)=1:nrow(df)
df=df[order(df$grp,!df$Use,df$Id,df$tp),]
lResp=unique(lmeas)
df
ftp=tapply(1:nrow(df),df$Id,function(x) sapply(lResp,function(y) min(df$tp[x[min(which(df[x,y]>0))]])))
ftp
ftp
if(setday0){
ftp=tapply(1:nrow(df),df$Id,function(x) sapply(lResp,function(y) min(df$tp[x[min(which(df[x,y]>0))]],na.rm=T)))
for(i in names(ftp)[!is.na(ftp)]){
if(any(df$Id==i & df$tp<ftp[i])) for(k in lResp) df[which(df$Id==i & df$tp<ftp[i]),k]=NA
df$tp[df$Id==i]=df$tp[df$Id==i]-ftp[i]+1
}
df=df[which(df$tp>=0),]
}
names(ftp)[!is.na(ftp)]
ftp
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df$tp=as.numeric(gsub(";;.*","",rownames(df)))
df$Id=gsub("^[0-9]+;;","",rownames(df))
df$Use=use[df$Id]
df$grp=factor(grps[df$Id],levels = unique(grps))
rownames(df)=1:nrow(df)
df=df[order(df$grp,!df$Use,df$Id,df$tp),]
lResp=unique(lmeas)
if(setday0){
ftp=tapply(1:nrow(df),df$Id,function(x) sapply(lResp,function(y) min(df$tp[x[min(which(df[x,y]>0))]],na.rm=T)))
for(i in names(ftp)[!is.infinite(ftp)]){
if(any(df$Id==i & df$tp<ftp[i])) for(k in lResp) df[which(df$Id==i & df$tp<ftp[i]),k]=NA
df$tp[df$Id==i]=df$tp[df$Id==i]-ftp[i]+1
}
df=df[which(df$tp>=0),]
}
names(ftp)[!is.infinite(ftp)]
df
for(i in lResp){
if(exclzer) df[which(df[,i]==0),i]=NA
v=round(log(df[,i]),ndigit)
if(!imputezer) v[is.infinite(v)]=NA
if(imputezer) v[is.infinite(v)]=log(min(df[df[,i]>0,i],na.rm=T)/2)
if(sum(is.na(v) | is.infinite(v))<(nrow(df)*.2)){
df[,paste(i,"log",sep=".")]=v
lResp=c(lResp,paste(i,"log",sep="."))
}
}
df=df[,c(which(names(df)%in%lResp),which(!names(df)%in%lResp))]
df
df[,lResp]
rowSums(is.na(df[,lResp]))
rowSums(is.na(df[,lResp]))==length(lResp)
lResp[rowSums(is.na(df[,lResp]))==length(lResp),]
df[rowSums(is.na(df[,lResp]))==length(lResp),]
if(exclzer) for(i in lResp) df[which(df[,i]==0),i]=NA
df[rowSums(is.na(df[,lResp]))==length(lResp),]
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df$tp=as.numeric(gsub(";;.*","",rownames(df)))
df$Id=gsub("^[0-9]+;;","",rownames(df))
df$Use=use[df$Id]
df$grp=factor(grps[df$Id],levels = unique(grps))
rownames(df)=1:nrow(df)
df=df[order(df$grp,!df$Use,df$Id,df$tp),]
lResp=unique(lmeas)
if(exclzer) for(i in lResp) df[which(df[,i]==0),i]=NA
df=df[!rowSums(is.na(df[,lResp]))==length(lResp),]
rownames(df)=1:nrow(df)
if(setday0){
ftp=tapply(1:nrow(df),df$Id,function(x) sapply(lResp,function(y) min(df$tp[x[min(which(df[x,y]>0))]],na.rm=T)))
for(i in names(ftp)[!is.infinite(ftp)]){
if(any(df$Id==i & df$tp<ftp[i])) for(k in lResp) df[which(df$Id==i & df$tp<ftp[i]),k]=NA
df$tp[df$Id==i]=df$tp[df$Id==i]-ftp[i]+1
}
df=df[which(df$tp>=0),]
}
ftp
exclzer
lResp=unique(lmeas)
if(exclzer) for(i in lResp) df[which(df[,i]==0),i]=NA
rowSums(is.na(df[,lResp]))==length(lResp)
rowSums(is.na(df[,lResp]))
(is.na(df[,lResp]))
(is.na(df[,lResp,drop=FALSE]))
lResp=unique(lmeas)
if(exclzer) for(i in lResp) df[which(df[,i]==0),i]=NA
df=df[!rowSums(is.na(df[,lResp,drop=FALSE]))==length(lResp),]
rownames(df)=1:nrow(df)
df
ftp=tapply(1:nrow(df),df$Id,function(x) sapply(lResp,function(y) min(df$tp[x[min(which(df[x,y]>0))]],na.rm=T)))
ftp
umeas=unique(unlist(lapply(allmeas,rownames)))
df=data.frame(sapply(allmeas,function(x) x[match(umeas,rownames(x)),1]),stringsAsFactors = F)
names(df)=unique(lmeas)
rownames(df)=umeas
df=df[rowSums(is.na(df[,unique(lmeas),drop=F]))<length(unique(lmeas)),,drop=F]
df=df[which(!apply(is.na(df),1,all)),,drop=F]
df$tp=as.numeric(gsub(";;.*","",rownames(df)))
df$Id=gsub("^[0-9]+;;","",rownames(df))
df$Use=use[df$Id]
df$grp=factor(grps[df$Id],levels = unique(grps))
rownames(df)=1:nrow(df)
df=df[order(df$grp,!df$Use,df$Id,df$tp),]
lResp=unique(lmeas)
if(exclzer) for(i in lResp) df[which(df[,i]==0),i]=NA
df=df[!rowSums(is.na(df[,lResp,drop=FALSE]))==length(lResp),]
rownames(df)=1:nrow(df)
ftp=tapply(1:nrow(df),df$Id,function(x) sapply(lResp,function(y) min(df$tp[x[min(which(df[x,y]>0))]],na.rm=T)))
ftp
shiny::runApp()
shiny::runApp()
library(nlstools)
library(nlsMicrobio)
?buchanan
data(growthcurve1)
nls1 <- nls(baranyi, growthcurve1,
list(lag=4, mumax=1, LOG10N0 = 4, LOG10Nmax = 9))
nls2 <- nls(gompertzm,growthcurve1,
list(lag = 4, mumax = 1, LOG10N0 = 4, LOG10Nmax = 9))
nls3 <- nls(buchanan, growthcurve1,
list(lag = 4, mumax = 1, LOG10N0 = 4, LOG10Nmax = 9))
def.par <- par(no.readonly = TRUE)
par(mfrow = c(2,2))
plotfit(nls1, smooth = TRUE)
plotfit(nls2, smooth = TRUE)
plotfit(nls3, smooth = TRUE)
par(def.par)
data(survivalcurve1)
data(survivalcurve2)
data(survivalcurve3)
def.par <- par(no.readonly = TRUE)
par(mfrow=c(2,2))
plot(survivalcurve1, type="b")
plot(survivalcurve2, type="b")
plot(survivalcurve3, type="b")
par(def.par)
data(survivalcurve1)
nls1a <- nls(geeraerd, survivalcurve1,
list(Sl = 5, kmax = 1.5, LOG10N0 = 7, LOG10Nres = 1))
nls1b <- nls(trilinear, survivalcurve1,
list(Sl = 5, kmax = 1.5, LOG10N0 = 7, LOG10Nres = 1))
nls1c <- nls(albert,survivalcurve1,
list(p = 1.2, delta = 4, LOG10N0 = 7, LOG10Nres = 1))
def.par <- par(no.readonly = TRUE)
par(mfrow = c(2,2))
overview(nls1a)
plotfit(nls1a, smooth = TRUE)
overview(nls1b)
plotfit(nls1b, smooth = TRUE)
overview(nls1c)
plotfit(nls1c, smooth = TRUE)
par(def.par)
data(survivalcurve3)
nls3a <- nls(geeraerd_without_Sl, survivalcurve3,
list(kmax = 4, LOG10N0 = 7.5, LOG10Nres = 1))
nls3b <- nls(bilinear_without_Sl, survivalcurve3,
list(kmax = 4, LOG10N0 = 7.5, LOG10Nres = 1))
nls3c <- nls(mafart, survivalcurve3,
list(p = 0.5, delta = 0.2, LOG10N0 = 7.5))
def.par <- par(no.readonly = TRUE)
par(mfrow = c(2,2))
overview(nls3a)
plotfit(nls3a, smooth = TRUE)
overview(nls3b)
plotfit(nls3b, smooth = TRUE)
overview(nls3c)
plotfit(nls3c, smooth = TRUE)
par(def.par)
shiny::runApp()
shiny::runApp()
